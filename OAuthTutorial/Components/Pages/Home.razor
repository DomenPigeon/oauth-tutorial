@page "/"
@using Microsoft.Extensions.Options
@using OAuthTutorial.Code
@inject IOptions<AppSettings> AppSettings
@rendermode InteractiveServer

<PageTitle>Home</PageTitle>

<h1>Login</h1>

@if (AppSettings.Value.AuthorizationEndpoint is null)
{
    <p>
        You need to configure the @nameof(Code.AppSettings.AuthorizationEndpoint) in the appsettings.secrets.json file.
        Finish <a href="https://oauth.school/exercise/introduction/">this</a> tutorial to get an server endpoint.
    </p>
}
else if (!AppSettings.Value.AuthorizationEndpoint.EndsWith("/authorize"))
{
    <p>
        Your link is probably wrong. The @nameof(Code.AppSettings.AuthorizationEndpoint) should end with /authorize.
    </p>
}
else
{
    <p>
        @(nameof(Code.AppSettings.AuthorizationEndpoint)): @AppSettings.Value.AuthorizationEndpoint
    </p>
}

@if (AppSettings.Value.ClientId is null)
{
    <p>
        You need to configure the @nameof(Code.AppSettings.ClientId) in the appsettings.secrets.json file.
        Finish <a href="https://oauth.school/exercise/introduction/">this</a> tutorial to get an client id.
    </p>
}
else
{
    <p>
        @(nameof(Code.AppSettings.ClientId)): @AppSettings.Value.ClientId
    </p>
}

@if (AppSettings.Value.ClientSecret is null)
{
    <p>
        You need to configure the @nameof(Code.AppSettings.ClientSecret) in the appsettings.secrets.json file.
        Finish <a href="https://oauth.school/exercise/introduction/">this</a> tutorial to get an client secret.
    </p>
}
else
{
    <p>
        @(nameof(Code.AppSettings.ClientSecret)): @AppSettings.Value.ClientSecret[..4]@(new string('*', AppSettings.Value.ClientSecret.Length - 4))
    </p>
}

@if (AppSettings.Value.AuthorizationEndpoint is not null && AppSettings.Value.ClientId is not null && AppSettings.Value.ClientSecret is not null)
{
    <button @onclick="Login">Login into OAuth</button>
}
else
{
    <p>
        Configure the settings to enable the login button.
    </p>
}

@foreach (var step in _loginSteps)
{
    <p @key="@step">@step</p>
}


@code {

    private readonly List<MarkupString> _loginSteps = new();

    private async Task Login()
    {
        await Add(new("First we need to generate the Authorization Request"));
        await Add(new("For this we need the Pkce code verifier and challenge"));

        var (codeVerifier, codeChallenge) = Pkce.GenerateCodeVerifierAndChallenge();

        await Add(new($"Code Verifier: {codeVerifier}"));
        await Add(new($"Code Challenge: {codeChallenge}"));

        var settings = AppSettings.Value;
        var endpoint = settings.AuthorizationEndpoint!;
        var clientId = settings.ClientId!;
        await Add(new("Now we can generate the Authorization Request"));
        await Add(new($"For the redirect uri we will use {settings.RedirectUri}"));

        var request = OAuth.GenerateAuthorizationUri(endpoint, clientId, codeVerifier, settings.RedirectUri, codeChallenge);

        await Add(new($"Authorization Request: {request}"));
        await Add(new("Now you can click the link to be redirected to the OAuth server."));
        await Add(new($"<a href='{request}'>Click here to login via OAuth</a>"));
        await Add(new($"After you will be logged in the server will redirect you back to the redirect uri: {settings.RedirectUri}"));
        await Add(new("Check the LoginController"));
        await InvokeAsync(StateHasChanged);
    }

    private async Task Add(MarkupString markup)
    {
        _loginSteps.Add(markup);
        await InvokeAsync(StateHasChanged);
        await Task.Delay(100);
    }

}
@page "/"
@using System.Text.Json
@using Microsoft.Extensions.Options
@using OAuthTutorial.Code
@inject IOptions<AppSettings> AppSettings
@inject RedirectService Service 
@rendermode InteractiveServer

<PageTitle>Home</PageTitle>

<h1>Login</h1>

@if (AppSettings.Value.IssuerUrl is null)
{
    <p>
        You need to configure the @nameof(Code.AppSettings.IssuerUrl) in the appsettings.secrets.json file.
        Finish <a href="https://oauth.school/exercise/introduction/">this</a> tutorial to get an issuer url.
    </p>
}
else
{
    <p>
        @(nameof(Code.AppSettings.IssuerUrl)): @AppSettings.Value.IssuerUrl
    </p>
}

@if (AppSettings.Value.AuthorizationEndpoint is null)
{
    <p>
        You need to configure the @nameof(Code.AppSettings.AuthorizationEndpoint) in the appsettings.secrets.json file.
        Finish <a href="https://oauth.school/exercise/introduction/">this</a> tutorial to get an authorization endpoint.
    </p>
}
else
{
    <p>
        @(nameof(Code.AppSettings.AuthorizationEndpoint)): @AppSettings.Value.AuthorizationEndpoint
    </p>
}

@if (AppSettings.Value.TokenEndpoint is null)
{
    <p>
        You need to configure the @nameof(Code.AppSettings.TokenEndpoint) in the appsettings.secrets.json file.
        Finish <a href="https://oauth.school/exercise/introduction/">this</a> tutorial to get an token endpoint.
    </p>
}
else
{
    <p>
        @(nameof(Code.AppSettings.TokenEndpoint)): @AppSettings.Value.TokenEndpoint
    </p>
}

@if (AppSettings.Value.ClientId is null)
{
    <p>
        You need to configure the @nameof(Code.AppSettings.ClientId) in the appsettings.secrets.json file.
        Finish <a href="https://oauth.school/exercise/introduction/">this</a> tutorial to get an client id.
    </p>
}
else
{
    <p>
        @(nameof(Code.AppSettings.ClientId)): @AppSettings.Value.ClientId
    </p>
}

@if (AppSettings.Value.ClientSecret is null)
{
    <p>
        You need to configure the @nameof(Code.AppSettings.ClientSecret) in the appsettings.secrets.json file.
        Finish <a href="https://oauth.school/exercise/introduction/">this</a> tutorial to get an client secret.
    </p>
}
else
{
    <p>
        @(nameof(Code.AppSettings.ClientSecret)): @AppSettings.Value.ClientSecret[..4]@(new string('*', AppSettings.Value.ClientSecret.Length - 4))
    </p>
}

@if (AppSettings.Value.IssuerUrl is not null &&
     AppSettings.Value.ClientId is not null &&
     AppSettings.Value.ClientSecret is not null &&
     AppSettings.Value.AuthorizationEndpoint is not null &&
     AppSettings.Value.TokenEndpoint is not null
    )
{
    <button @onclick="Login">Login into OAuth</button>
}
else
{
    <p>
        Configure the settings to enable the login button.
    </p>
}

@foreach (var step in _loginSteps)
{
    <p @key="@step">@step</p>
}


@code {

    private readonly List<MarkupString> _loginSteps = new();

    private async Task Login()
    {
        await Add(new("First we need to generate the Authorization Request"));
        await Add(new("For this we need the Pkce code verifier and challenge"));

        var (codeVerifier, codeChallenge) = Pkce.GenerateCodeVerifierAndChallenge();

        await Add(new($"Code Verifier: {codeVerifier}"));
        await Add(new($"Code Challenge: {codeChallenge}"));

        var settings = AppSettings.Value;
        var authorizationEndpoint = AppSettings.Value.AuthorizationEndpoint!;
        var clientId = settings.ClientId!;
        await Add(new("Now we can generate the Authorization Request"));
        await Add(new($"For the redirect uri we will use {settings.RedirectUri}"));

        var state = Guid.NewGuid().ToString();
        var request = OAuth.GenerateAuthorizationUri(authorizationEndpoint, clientId, state, settings.RedirectUri, codeChallenge);

        await Add(new($"Authorization Request: {request}"));
        await Add(new("Now you can click the link to be redirected to the OAuth server."));
        await Add(new($"<a href=\"{request}\" target=\"blank\">Click here</a>"));
        await Add(new($"After you will be logged in the server will redirect you back to the redirect uri: {settings.RedirectUri}"));
        await Add(new("Check the LoginController"));
        await Add(new("<hr/>"));
        await InvokeAsync(StateHasChanged);

        var response = await Service.GetNextRedirectResponseAsync();

        await Add(new($"Got back response: {response}"));
        await Add(new("Now we need to make a POST request to the Token Endpoint"));
        await Task.Delay(2000);

        if (response.State != state)
        {
            await Add(new("The state is not the same as the one we sent. This is a security issue."));
            return;
        }

        var postRequest = OAuth.GenerateTokenPostRequest(settings.TokenEndpoint!, clientId, settings.ClientSecret!, response.AuthorizationCode, settings.RedirectUri, codeVerifier);
        var content = await postRequest.Content!.ReadAsStringAsync();

        var serializedRequest = JsonSerializer.Serialize(postRequest, new JsonSerializerOptions { WriteIndented = true });
        await Add(new($"Token Request content: <pre>\n{serializedRequest}</pre>"));
        await Add(new($"Token Request content: {content}"));
        await Add(new("Sending the request in"));
        await Add(new("3"));
        await Add(new("2"));
        await Add(new("1"));
        await Add(new("Request sent"));

        var client = new HttpClient();
        var tokenResponse = await client.SendAsync(postRequest);

        var token = await tokenResponse.Content.ReadAsStringAsync();

        await Add(new($"Got back token: <pre>{token}</pre>"));
        await Add(new("Now you can use the token to access the server."));
    }

    private async Task Add(MarkupString markup)
    {
        _loginSteps.Add(markup);
        await InvokeAsync(StateHasChanged);
        await Task.Delay(100);
    }

}